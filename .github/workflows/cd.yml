name: CD
on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      push:
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    permissions:
      contents: read
    env:
      python-version: "3.12"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.python-version }}
          cache: 'pip'

      - name: Create virtual environment
        run: make venv

      - name: Build
        run: cat pyproject.toml | grep version && make build-release && cat pyproject.toml | grep version

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: localllmrag
          path: dist
          retention-days: 1

  publish-to-testpypi:
    needs: [ build ]
    name: Publish Python 🐍 distribution 📦 to TestPyPI
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/localllmrag
    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: localllmrag
          path: dist/

      - name: Publish distribution 📦 to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: 'true'
          repository-url: https://test.pypi.org/legacy/

  publish-to-pypi:
    name: Publish Python 🐍 distribution 📦 to PyPI
    needs: [ publish-to-testpypi ]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/localllmrag
    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: localllmrag
          path: dist/

      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-github-release:
    name: Publish distribution 📦 to Github
    needs: [ publish-to-pypi ]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update CHANGELOG
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}
          writeToFile: false
          includeRefIssues: false
          includeInvalidCommits: true

      - name: Fetch release artifact
        uses: actions/download-artifact@v4
        with:
          name: localllmrag
          path: dist

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changes }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            const fs = require('fs').promises;
            const path = require('path');
            
            const files = await fs.readdir('dist');
            const tarFile = files.find(file => file.endsWith('.tar.gz'));
            const wheelFile = files.find(file => file.endsWith('.whl'));
            
            for (const file of [tarFile, wheelFile]) {
              if (!file) continue;
              const filePath = path.join('dist', file);
              const fileData = await fs.readFile(filePath);
            
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ steps.create_release.outputs.id }},
                name: file,
                data: fileData,
                headers: {
                  'content-type': file.endsWith('.tar.gz') ? 
                    'application/gzip' : 'application/x-wheel+zip',
                }
              });
            }
